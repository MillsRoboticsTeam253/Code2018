// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc253.Code2018;
import edu.wpi.first.wpilibj.XboxController;


import org.usfirst.frc253.Code2018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc253.Code2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
	
	//making objects for joystick buttons and xBox controller :) 
	 
	public Joystick operator1;
	public Joystick operator2;
	
	public XboxController xboxController;
    public JoystickButton ButtonA;
    public JoystickButton ButtonB; 
    public JoystickButton ButtonX;
    public JoystickButton ButtonY;
    public JoystickButton ButtonRB;
    public JoystickButton ButtonLB;
    public JoystickButton ButtonRT;
    public JoystickButton ButtonLT; 
    public JoystickButton ButtonStart;
    public JoystickButton ButtonSelect; 
    public JoystickButton ButtonL6;
    public JoystickButton ButtonL7;
    
    public JoystickButton OperatorOne1;
    public JoystickButton OperatorOne4;
    public JoystickButton OperatorOne5;
    public JoystickButton OperatorOne7;
    public JoystickButton OperatorOne8;
    public JoystickButton OperatorOne10;
    public JoystickButton OperatorOne11;
    public JoystickButton OperatorOne2;
    public JoystickButton OperatorOne3;
    
    public JoystickButton OperatorTwo1;
    public JoystickButton OperatorTwo2;
    public JoystickButton OperatorTwo3;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	xboxController = new XboxController(1);
    	operator2 = new Joystick(3);
    	operator1 = new Joystick(2);
    	//assigning where the buttons are 
        ButtonA = new JoystickButton(xboxController, 1); 
        ButtonB = new JoystickButton(xboxController, 2);
        ButtonX = new JoystickButton(xboxController, 3); 
        ButtonY = new JoystickButton(xboxController, 4);
        ButtonRB = new JoystickButton(xboxController, 6);
        ButtonLB = new JoystickButton(xboxController, 5);
        ButtonRT = new JoystickButton(xboxController, 7);
        ButtonLT = new JoystickButton(xboxController, 8);
        ButtonStart = new JoystickButton(xboxController, 9);
        ButtonSelect = new JoystickButton(xboxController, 10);
        
        // SmartDashboard Buttons
        OperatorOne1 = new JoystickButton(operator1, 1);
        OperatorOne2 = new JoystickButton(operator1, 2);
        OperatorOne3 = new JoystickButton(operator1, 3);
        OperatorOne4 = new JoystickButton(operator1, 4);
        OperatorOne5 = new JoystickButton(operator1, 5);
        OperatorOne7 = new JoystickButton(operator1, 7);
        OperatorOne8 = new JoystickButton(operator1, 8);
        OperatorOne10 = new JoystickButton(operator1, 10);
        OperatorOne11 = new JoystickButton(operator1, 11);
        
        OperatorTwo1 = new JoystickButton(operator2, 1);
        OperatorTwo2 = new JoystickButton(operator2, 2);
        OperatorTwo3 = new JoystickButton(operator2, 3);
      //giving each xBox button a command
        //button board start
     // //ButtonBoard11.whileHeld(new swingIn());
      ////ButtonBoard9.whileHeld(new swingOut());
      //  ButtonBoard1.whileHeld(new spinIntake());
      //  ButtonBoard8.whileHeld(new spinEject());
//        ButtonBoard5.whileHeld(new insideIntake());
//        ButtonBoard4.whileHeld(new insideEject());
        //button board end
        //ButtonY.whileHeld(new StraightDrive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ButtonY.whileHeld(new SpinRightIntake());
        OperatorOne1.whileHeld(new SetElevator(Robot.elevatorChooser.getSelected()));
        ButtonRB.whileHeld(new TakeIn());
        OperatorOne2.whileHeld(new Ejectonly());
        OperatorOne3.whileHeld(new Ejecthalf());
        OperatorOne5.whileHeld(new Eject());
        
        OperatorTwo3.whileHeld(new TakeInHalf());

        OperatorTwo1.whileHeld(new elevatorUp());
        OperatorTwo2.whileHeld(new elevatorDown());
        
        SmartDashboard.putData("Compressor Off", new CompressorOff());
        SmartDashboard.putData("Compressor On", new CompressorOn());
    }
    
  //making method to get the button board later 
    public Joystick getOperatorJoystick2(){
    	return operator2;
    }
    public Joystick getOperatorJoystick1(){
    	return operator1;
    }
    
    public double getLeftJoystickY(){
    	return xboxController.getY(GenericHID.Hand.kLeft)*0.80;
    }
    public double getRightJoystickX(){
    	return xboxController.getX(GenericHID.Hand.kRight)*0.80;
    }
   public double getRightJoystickY(){
    	return xboxController.getY(GenericHID.Hand.kRight)*0.80;
    }
       

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUI
   //LDER ID=FUNCTIONS
}

