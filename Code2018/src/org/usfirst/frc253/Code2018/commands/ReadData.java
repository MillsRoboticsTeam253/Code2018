package org.usfirst.frc253.Code2018.commands;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;

//RobotBuilder Version: 2.0
//
//This file was generated by RobotBuilder. It contains sections of
//code that are automatically generated and assigned by robotbuilder.
//These sections will be updated in the future when you export to
//Java from RobotBuilder. Do not put any code or make any change in
//the blocks indicating autogenerated code or it will be lost on an
//update. Deleting the comments indicating the section will prevent
//it from being updated in the future.

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc253.Code2018.Robot;

/**
*
*/
public class ReadData extends Command {

 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
 // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
 public ReadData() {

 // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
     requires(Robot.sensors);
     
 // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
 }

 // Called just before this Command runs the first time
 protected void initialize() {
 }

 // Called repeatedly when this Command is scheduled to run
 protected void execute() {//this sends a message to the smart dashboard
	 // Command "got cube?" tells driver if there's cube//
	  //Command "how far" tells driver how far from an object
	 SmartDashboard.putBoolean("Has cube?", Robot.sensors.getLimitSwitch1().get());
//	 SmartDashboard.putBoolean("got limit switch2?", Robot.sensors.hasCube());
	 
	 SmartDashboard.putNumber("Yaw", Robot.sensors.getYaw());
	 SmartDashboard.putNumber("Pitch", Robot.sensors.getPitch());
	 SmartDashboard.putNumber("Roll", Robot.sensors.getRoll());
	 
	 SmartDashboard.putNumber("Proprotional Gain", Robot.driveTrain.getkP());
 	 SmartDashboard.putNumber("Integral Gain", Robot.driveTrain.getkI());
 	 SmartDashboard.putNumber("Derivative Gain", Robot.driveTrain.getkD());
 	 SmartDashboard.putNumber("Feed Forward Gain", Robot.driveTrain.getkF());
 	 
 	 SmartDashboard.putNumber("Left Position", Robot.driveTrain.getLeftBack().getSelectedSensorPosition(0));
 	 SmartDashboard.putNumber("Right Position", Robot.driveTrain.getRightFront().getSelectedSensorPosition(0));
 	
 	 SmartDashboard.putNumber("Left Velocity", Robot.driveTrain.getLeftBack().getSelectedSensorVelocity(0)/4096*(Math.PI*6)/12);
 	 SmartDashboard.putNumber("Right Velocity", Robot.driveTrain.getRightFront().getSelectedSensorVelocity(0)/4096*(Math.PI*6)/12);
 	 
 	 SmartDashboard.putNumber("Left Back", Robot.driveTrain.getLeftBack().getMotorOutputPercent());
 	SmartDashboard.putNumber("Right Back", Robot.driveTrain.getRightBack().getMotorOutputPercent());
 	SmartDashboard.putNumber("Left Front", Robot.driveTrain.getLeftFront().getMotorOutputPercent());
 	SmartDashboard.putNumber("Right Front", Robot.driveTrain.getRightFront().getMotorOutputPercent());
}

 // Make this return true when this Command no longer needs to run execute()
 protected boolean isFinished() {
     return false;
 }

 // Called once after isFinished returns true
 protected void end() {
 }

 // Called when another command which requires one or more of the same
 // subsystems is scheduled to run
 protected void interrupted() {
 }
}
