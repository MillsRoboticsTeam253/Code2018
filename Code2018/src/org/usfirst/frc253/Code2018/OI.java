// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc253.Code2018;

import org.usfirst.frc253.Code2018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc253.Code2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public Joystick rightJoystick;
    public JoystickButton buttonR3;
    public JoystickButton buttonR4; 
    public JoystickButton buttonR2;
    public JoystickButton buttonR5;
    public JoystickButton buttonR10;
    public JoystickButton buttonR11;
    public JoystickButton buttonL2;
    public JoystickButton buttonL3; 
    public JoystickButton buttonL4;
    public JoystickButton buttonL5; 
    public JoystickButton buttonL6;
    public JoystickButton buttonL7;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightJoystick = new Joystick(1);
        
        leftJoystick = new Joystick(0);
        
        buttonR3 = new JoystickButton(rightJoystick, 3);
        
        buttonR4 = new JoystickButton(rightJoystick, 4); 
        
        buttonR2 = new JoystickButton(rightJoystick, 2); 
        
        buttonR5 = new JoystickButton(rightJoystick, 5); 
        
        buttonR10 = new JoystickButton(rightJoystick, 10);
        
        buttonR11 = new JoystickButton(rightJoystick, 11); 
        
        buttonL2 = new JoystickButton(leftJoystick, 2);
        
        buttonL3 = new JoystickButton(leftJoystick, 3);
        
        buttonL4 = new JoystickButton(leftJoystick, 4);
        
        buttonL5 = new JoystickButton(leftJoystick, 5);
        
        buttonL6 = new JoystickButton(leftJoystick, 6);
        
        buttonL7 = new JoystickButton(leftJoystick, 7);
;         
        
        
        

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("tankDrive", new tankDrive());
        buttonR3.whileHeld(new StraightDrive());
        buttonR4.whileHeld(new TurnLeft());
        buttonR2.whileHeld(new DriveBackwards());
        buttonR5.whileHeld(new turnRight());
        buttonR10.whileHeld(new climbUp());
        buttonR11.whileHeld(new climbDown());
        buttonL2.whileHeld(new grab());
        buttonL3.whileHeld(new letGo());
        buttonL4.whileHeld(new elevatorUp());
        buttonL5.whileHeld(new elevatorDown());
        buttonL6.whileHeld(new sweepForward());
        buttonL7.whileHeld(new sweepBack());
       
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    private Command turnRight() {
		// TODO Auto-generated method stub
		return null;
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

