// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc253.Code2018;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;

import org.usfirst.frc253.Code2018.commands.*;
import org.usfirst.frc253.Code2018.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser<Position> positionChooser;
    SendableChooser<Enemy> enemyChooser;
    SendableChooser<Ally> allyChooser;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Sensors sensors;
    public static Pneumatics pneumatics;
    public static Elevator elevator;
    public static Intake intake;
    public static Climber climber;
    
    public String gameData;
    
    public enum Position{
    	LEFT('L'), CENTER('C'), RIGHT('R');
    	
    	private final char pos;
    	
    	private Position(char pos){
    		this.pos = pos;
    	}
    	
    	public char getPos(){
    		return pos;
    	}
    }
    
    public enum Enemy{
    	SCALE, DEFEND
    }
    
    public enum Ally{
    	SWITCH, SCALEORDEFEND
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        sensors = new Sensors();
        pneumatics = new Pneumatics();
        elevator = new Elevator();
        intake = new Intake();
        climber = new Climber();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        positionChooser = new SendableChooser();
        positionChooser.addDefault("Center", Position.CENTER);
        positionChooser.addObject("Left", Position.LEFT);
        positionChooser.addObject("Right", Position.RIGHT);
        enemyChooser = new SendableChooser();
        enemyChooser.addDefault("Enemy can do scale", Enemy.SCALE);
        enemyChooser.addObject("Enemy can defending", Enemy.DEFEND);
        allyChooser = new SendableChooser();
        allyChooser.addDefault("Ally going to the switch", Ally.SWITCH);
        allyChooser.addObject("Ally is going to null zone", Ally.SCALEORDEFEND);
        
        
        
        
        
        
        
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        gameData = DriverStation.getInstance().getGameSpecificMessage();
    }

    public void autonomousInit() {
    	Position position = (Position) positionChooser.getSelected();
    	char switchSide = gameData.charAt(0);
    	char scaleSide = gameData.charAt(1);
    	Enemy canDo = (Enemy) enemyChooser.getSelected();
    	Ally isDoing = (Ally) allyChooser.getSelected();
    	if(position == Position.LEFT || position == Position.RIGHT){
    		if(switchSide == position.getPos() && scaleSide != position.getPos()){//Switch is ours and scale is not ours
    			if(canDo == Enemy.SCALE){
    				//defend
    			}else {}//switch
    		}
    		else if(switchSide != position.getPos() && scaleSide == position.getPos()){//Switch is not ours scale is ours
    			if(canDo == Enemy.DEFEND){
    				//exchange 
    			}else {}//scale 
    		}
    		else if(switchSide == position.getPos() && scaleSide == position.getPos()){//both switch and scale is ours
    			if(canDo == Enemy.DEFEND){
    				//switch 
    			}else {}//scale 
    				}
    		else if(switchSide != position.getPos() && scaleSide != position.getPos()){//Neither scale or switch  
    			if(canDo == Enemy.SCALE){
    				//defend
    			}else{}//exchange
    	
    		}
    	}else if (position == Position.CENTER){
    		if(switchSide == 'L'){
        		if(isDoing == Ally.SCALEORDEFEND){
        			//switch
        		}else{
        			//exchange
        		}
        	}else if(switchSide == 'R'){
        			if(isDoing == Ally.SCALEORDEFEND){
        				//switch
        			}else{//exchange
        			}
        	}
    	}
        // schedule the autonomous command (example)
        if (autonomousCommand != null){
        	autonomousCommand.start();
        }
        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
